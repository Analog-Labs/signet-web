import { SUPPORTED_CHAINS, CUSTOM_CHAINS, CHAINDATA_URL, Chain } from '../config'
import fs from 'fs'

const generateSupportedChains = async () => {
  const chaindata = (await fetch(CHAINDATA_URL).then(response => response.json())) as any
  const supportedChains: Chain[] = []

  for (const [chainId, chainDetails] of Object.entries(SUPPORTED_CHAINS)) {
    // @ts-ignore
    const chain = chaindata.find(chain => chain.id === chainId)
    if (chain) {
      supportedChains.push({
        id: chain.id,
        chainName: chain.name,
        genesisHash: chain.genesisHash,
        isTestnet: chain.isTestnet,
        logo: chainDetails.logo ?? chain.logo,
        nativeToken: {
          id: chain.nativeToken?.id,
        },
        rpcs: chainDetails.rpcs ?? chain.rpcs,
        ss58Prefix: chain.prefix,
        subscanUrl: chainDetails.subscanUrl ?? chain.subscanUrl,
        polkaAssemblyUrl: chainDetails.polkaAssemblyUrl ?? chain.polkaAssemblyUrl,
        account: chain.account,
      })
    }
  }
  CUSTOM_CHAINS.forEach(chain => {
    supportedChains.push({ ...chain, id: `custom-${chain.genesisHash}`, account: chain.account })
  })

  fs.writeFileSync(
    'src/domains/chains/generated-chains.ts',
    `
  import { Chain } from './tokens'

  // DO NOT MODIFY THIS FILE MANUALLY
  // This file is auto-generated by scripts/chaingen.ts
  export type SupportedChainIds = ${supportedChains.map(({ id }) => `'${id}'`).join(' | ')}
  export const supportedChains: Chain<SupportedChainIds>[] =  ${JSON.stringify(supportedChains, null, 2)}
  `
  )
  console.log(`Generated ${supportedChains.length} supported chains successfully`)
}

generateSupportedChains()
